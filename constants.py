"""
このファイルは、固定の文字列や数値などのデータを変数として一括管理するファイルです。
"""

############################################################
# ライブラリの読み込み
############################################################
from langchain_community.document_loaders import PyMuPDFLoader, Docx2txtLoader, TextLoader
from langchain_community.document_loaders.csv_loader import CSVLoader

SUPPORTED_EXTENSIONS = {
    ".pdf": PyMuPDFLoader,
    ".docx": Docx2txtLoader,
    ".csv": lambda path: CSVLoader(path, encoding="utf-8"),
    ".txt": lambda path: TextLoader(path, autodetect_encoding=True)
}


############################################################
# 共通変数の定義
############################################################

# ==========================================
# 画面表示系
# ==========================================
APP_NAME = "社内情報特化型生成AI検索アプリ"
ANSWER_MODE_1 = "社内文書検索"
ANSWER_MODE_2 = "社内問い合わせ"
CHAT_INPUT_HELPER_TEXT = "こちらからメッセージを送信してください。"
DOC_SOURCE_ICON = ":material/description: "
LINK_SOURCE_ICON = ":material/link: "
WARNING_ICON = ":material/warning:"
ERROR_ICON = ":material/error:"
SPINNER_TEXT = "回答生成中..."


# ==========================================
# ログ出力系
# ==========================================
LOG_DIR_PATH = "./logs"
LOGGER_NAME = "ApplicationLog"
LOG_FILE = "application.log"
APP_BOOT_MESSAGE = "アプリが起動されました。"


# ==========================================
# LLM設定系
# ==========================================
# モデル設定
MODEL = "gpt-4o-mini"
TEMPERATURE = 0.5

# ベクターストアの保存先ディレクトリ
VECTOR_STORE_DIR = "./db"

# ログ設定
LOG_DIR_PATH = "./logs"
LOG_FILE = "app.log"

# ==========================================
# RAG参照用のデータソース系
# ==========================================
RAG_TOP_FOLDER_PATH = "./data"
WEB_URL_LOAD_TARGETS = [
    "https://generative-ai.web-camp.io/"
]


# ==========================================
# プロンプトテンプレート
# ==========================================
SYSTEM_PROMPT_CREATE_INDEPENDENT_TEXT = """
あなたは、ユーザーの会話履歴と最新の質問をもとに、情報検索に適した明確な単独クエリを作成するアシスタントです。
以下の条件に従って、検索エンジンに入力可能なシンプルで明確な質問文を1文だけ生成してください。

【条件】
1. 会話履歴に依存せず、単独で意味が通じる文にしてください。
2. 一文で簡潔に表現してください。
3. 特定のキーワードや固有名詞を明示的に含めてください。

出力例：
「今期の株式会社EcoTeeの株主優待の内容を教えてください。」
"""

SYSTEM_PROMPT_DOC_SEARCH = """
あなたは社内文書に特化した検索アシスタントです。
以下の条件に基づいて、ユーザーの質問に対する文書ベースの回答を行ってください。

【条件】
1. 以下の文脈（社内文書）とユーザーの入力に明確な関連がある場合は、それに基づいて回答してください。
2. 関連性がないと判断した場合は、「該当資料なし」とだけ返してください。
3. 回答には、文脈の中で明示されている情報のみを使用してください。
4. 不確かな情報や文脈に存在しない事柄については言及しないでください。

【文脈】
{context}
"""

SYSTEM_PROMPT_INQUIRY = """
あなたは、社内情報に特化したAIアシスタントです。
以下の文脈（社内文書）とユーザーの質問に基づき、正確かつ丁寧に回答してください。

【条件】
1. 文脈とユーザーの質問に関連性がある場合、その情報をもとに回答してください。
2. 文脈に該当情報が見つからない場合、「回答に必要な情報が見つかりませんでした。」と回答してください。
3. 推測や曖昧な表現は避け、文脈に明記されている内容を中心に回答してください。
4. 回答はマークダウン形式で出力してください。見出しにはh3タグ（###）を使ってください。
5. 複雑な質問については、複数の観点から箇条書きで丁寧に説明してください。
6. ただし、基本的な常識レベルの補足（例：株主優待とは何か等）は許容します。

【文脈】
{context}
"""


# ==========================================
# LLMレスポンスの一致判定用
# ==========================================
INQUIRY_NO_MATCH_ANSWER = "回答に必要な情報が見つかりませんでした。"
NO_DOC_MATCH_ANSWER = "該当資料なし"


# ==========================================
# エラー・警告メッセージ
# ==========================================
COMMON_ERROR_MESSAGE = "このエラーが繰り返し発生する場合は、管理者にお問い合わせください。"
INITIALIZE_ERROR_MESSAGE = "初期化処理に失敗しました。"
NO_DOC_MATCH_MESSAGE = """
    入力内容と関連する社内文書が見つかりませんでした。\n
    入力内容を変更してください。
"""
CONVERSATION_LOG_ERROR_MESSAGE = "過去の会話履歴の表示に失敗しました。"
GET_LLM_RESPONSE_ERROR_MESSAGE = "回答生成に失敗しました。"
DISP_ANSWER_ERROR_MESSAGE = "回答表示に失敗しました。"

# ==========================================
# チャンク設定など
# ==========================================
RETRIEVER_K = 5          # 検索する関連ドキュメント数
CHUNK_SIZE = 500         # チャンクサイズ（文字数）
CHUNK_OVERLAP = 50       # チャンクの重なり（文字数）